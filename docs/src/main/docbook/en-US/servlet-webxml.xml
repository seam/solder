<?xml version='1.0' encoding='UTF-8'?>
<!--
  JBoss, Home of Professional Open Source
  Copyright 2010, Red Hat Middleware LLC, and individual contributors
  by the @authors tag. See the copyright.txt in the distribution for a
  full listing of individual contributors.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<chapter id="webxml">
  <title>Retrieving the location of <filename>web.xml</filename></title>
  
  <para>
    Sometimes developers need to access configuration parameters of a web application. Typically the
    <classname>ServletContext</classname> is used to obtain context parameters, servlet mappings and other information. 
    Unfortunately the <classname>ServletContext</classname> cannot be accessed in all situations. 
    Especially CDI extensions can be problematic in this regard as they are executed during a stage in the 
    application startup in which the <classname>ServletContext</classname> may not have been created yet.
  </para>
  
  <para>
    In such situations the only way for developers to access information like servlet context parameters is to
    manually parse the <filename>web.xml</filename> of the application. But to load the <filename>web.xml</filename>
    one would typically have to get it's location using <classname>ServletContext.getResource()</classname> which
    isn't possible due to the missing <classname>ServletContext</classname>.
  </para>

  <para>
    Solder offers some help in this situation. The class <classname>WebXmlFinder</classname> provides a simple
    way to obtain the location of the application's <filename>web.xml</filename>. Under the covers this
    class uses the SPI <classname>WebXmlLocator</classname> to retrieve the location. 
  </para>
  
  <para>
    The following example shows how to use this class:
  </para>

  <programlisting role="JAVA"><![CDATA[
WebXmlFinder finder = new WebXmlFinder();

if (finder.isWebXmlLocationAvailable()) {

  URL webXml = finder.getWebXmlLocation();

  // parse the web.xml file

}
]]>
  </programlisting>
  
  <para>
    As you can see using the <classname>WebXmlFinder</classname> is very easy. Just create an instance of the
    class and then use <methodname>getWebXmlLocation()</methodname> to retrieve the location.
  </para>

</chapter>
